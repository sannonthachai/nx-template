// *** GENERATED BY PRISMIX :: DO NOT EDIT ***
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  binaryTargets = ["native", "linux-musl"]
}

generator client {
  provider = "prisma-client-js"
}

model OrderInstance {
  id            Int                 @id @default(autoincrement())
  orderId       Int                 @map("order_id")
  code          String              @unique
  amount        Float
  status        OrderInstanceStatus @default(WaitingPurchase)
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")
  order         Order               @relation(name: "OrderToOrderInstance", fields: [orderId], references: [id])
  transactions  Transaction?        @relation(name: "OrderInstanceToTransaction")
  transferSlips TransferSlip[]      @relation(name: "OrderInstanceToTransferSlip")

  @@map("order_instances")
}

model Order {
  id             Int             @id @default(autoincrement())
  orderInstances OrderInstance[] @relation(name: "OrderToOrderInstance")
  orderItems     OrderItem[]     @relation(name: "OrderToOrderItem")
  ownerId        String          @map("owner_id")
  ownerJson      Json            @map("owner_json")
  code           String          @unique @map("code")
  terms          String          @map("terms")
  remark         String          @map("remark")
  discountTotal  Float           @map("discount_total")
  witholdingTax  Float           @map("witholding_tax")
  tags           String[]
  preTaxAmount   Float           @map("pre_tax_amount")
  vatAmount      Float           @map("vat_amount")
  netAmount      Float           @map("net_amount")
  status         OrderStatus     @default(WaitingPurchase) @map("status")
  issuedDate     DateTime        @map("issued_date")
  dueDate        DateTime        @map("due_date")
  purchasedDate  DateTime        @map("purchased_date")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")

  @@map("orders")
}

model Transaction {
  id              Int                @id @default(autoincrement())
  amount          Float
  medthod         TransactionMethod
  gateway         TransactionGateway
  net             Float
  type            TransactionType
  bank            TransactionBank?
  webhookJson     Json?              @map("webhook_json")
  installmentTerm Int                @map("installment_term")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")
  orderInstance   OrderInstance      @relation(name: "OrderInstanceToTransaction", fields: [orderInstanceId], references: [id])
  orderInstanceId Int                @unique @map("order_instance_id")

  @@map("transactions")
}

model OrderItemDiscountJson {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  type        String
  value       Float
  remark      String
  orderItem   OrderItem @relation(name: "OrderItemToOrderItemDiscountJson", fields: [orderItemId], references: [id])
  orderItemId Int       @map("order_item_id")

  @@map("order_item_discount_jsons")
}

model OrderItem {
  id                     Int                    @id @default(autoincrement())
  orderItemDiscountJsons OrderItemDiscountJson[] @relation(name: "OrderItemToOrderItemDiscountJson")
  itemId                 String                 @map("item_id")
  name                   String
  itemJson               Json                   @map("item_json")
  price                  Float
  vat                    Float
  description            String
  discount               Float
  discountJson           Json                   @map("discount_json")
  amount                 Float
  createdAt              DateTime               @default(now()) @map("created_at")
  updatedAt              DateTime               @updatedAt @map("updated_at")
  order                  Order                  @relation(name: "OrderToOrderItem", fields: [orderId], references: [id])
  orderId                Int                    @map("order_id")

  @@map("order_items")
}

model TransferSlip {
  id              Int            @id @default(autoincrement()) @map("id")
  status          TransferStatus @default(WaitingApproval)
  fromBank        String         @map("from_bank")
  toBank          String         @map("to_bank")
  slipPath        String         @map("slip_path")
  amount          Float
  transferredAt   DateTime       @map("transferred_at")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  orderInstance   OrderInstance  @relation(name: "OrderInstanceToTransferSlip", fields: [orderInstanceId], references: [id])
  orderInstanceId Int            @map("order_instance_id")
  transferSlipVerification TransferSlipVerification[] @relation(name: "TransferSlipToTransferSlipVerification")

  @@map("transfer_slips")
}


model TransferSlipVerification {
  id             Int          @id @default(autoincrement())
  userId         String       @map("user_id")
  userJson       Json         @map("user_json")
  verifiedAt     DateTime     @default(now()) @map("verified_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  transferSlip   TransferSlip @relation(name: "TransferSlipToTransferSlipVerification", fields: [transferSlipId], references: [id])
  transferSlipId Int          @map("transfer_slip_id")

  @@map("transfer_slip_verifications")
}

enum OrderInstanceStatus {
  Void
  WaitingPurchase
  WaitingApproval
  Complete
}

enum OrderStatus {
  WaitingPurchase
  WaitingApproval
  Void
  Refund
  Complete
}

enum TransactionType {
  income
  outcome
}

enum TransactionGateway {
  GBPAY     @map("gb-pay")
  OMISE     @map("omise")
  TWOCTWOP  @map("2c2p")
  TRANSFER  @map("transfer")
}

enum TransactionMethod {
  FULL         @map("full-payment")
  TRANSFER     @map("transfer-payment")
  QRCODE       @map("qrcode-payment")
  INSTALLMENT  @map("installment-payment")
}

enum TransactionBank {
  KTB                       @map("ktb")
  SCB                       @map("scb")
  KBANK                     @map("kbank")
  BBL                       @map("bbl")
  INSTALLMENT_BAY           @map("installment_bay")
  INSTALLMENT_SCB           @map("installment_scb")
  INSTALLMENT_CITI          @map("installment_citi")
  INSTALLMENT_BBL           @map("installment_bbl")
  INSTALLMENT_KBANK         @map("installment_kbank")
  INSTALLMENT_UOB           @map("installment_uob")
  INSTALLMENT_KTC           @map("installment_ktc")
  INSTALLMENT_FIRST_CHOICE  @map("installment_first_choice")
  INSTALLMENT_TBANK         @map("installment_tbank")
}

enum TransferStatus {
  Void
  WaitingApproval
  Approved
}
